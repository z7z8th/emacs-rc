(put 'scroll-left 'disabled nil)
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(inhibit-startup-screen t)
 '(show-paren-mode t))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:family "DejaVu Sans Mono" :foundry "unknown" :slant normal :weight normal :height 98 :width normal)))))

;; (add-to-list 'default-frame-alist '(t (:family "DejaVu Sans Mono" :foundry "unknown" :slant normal :weight normal :height 98 :width normal) ))


;; {{{ Package
(add-to-list 'load-path "~/.emacs.d/my-pkgs/")

(when (>= emacs-major-version 24)
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/") t)
  (add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/") t)
  (package-initialize)
  )

(setq package-load-list '(nlinum auto-complete markdown-mode))
;; }}}


(require 'saveplace)                          ;; get the package
(setq save-place-file "~/.emacs.d/var/saveplace") ;; keep my ~/ clean
(setq-default save-place t)                   ;; activate it for all buffers

;; {{{ auto-complete
(require 'auto-complete-config)
;; (add-to-list 'ac-dictionary-directories "~/.emacs.d/ac-dict")
(add-to-list 'ac-dictionary-directories ".emacs.d/elpa/auto-complete-20130724.1750/dict")
(setq ac-comphist-file "~/.emacs.d/var/ac-comphist.dat")
(ac-config-default)
;; dirty fix for having AC everywhere
(define-globalized-minor-mode real-global-auto-complete-mode
  auto-complete-mode (lambda ()
                       (if (not (minibufferp (current-buffer)))
                         (auto-complete-mode 1))
                       ))
(real-global-auto-complete-mode t)

;; }}}

;; line number
(require 'nlinum)
(global-linum-mode t)
(setq linum-format "%3d ")

;; cscope
(require 'xcscope)

;; {{{ Key
(windmove-default-keybindings)   ;; use Shift+up/down/right/left to jump between windows
;; }}}

(show-paren-mode 1)    ; turn on paren match highlighting
(setq show-paren-style 'expression)   ; highlight entire bracket expression

(recentf-mode 1)

(global-visual-line-mode 1) ; wrap at word boundary. 1 for on, 0 for off.

;; (global-hl-line-mode 1) ; turn on highlighting current line


;; {{{ code indent

(defun indent-file (file)
  "prompt for a file and indent it according to its major mode"
  (interactive "fWhich file do you want to indent: ")
  (find-file file)
  ;; uncomment the next line to force the buffer into a c-mode
  ;; (c-mode)
  (indent-region (point-min) (point-max)))

;(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)

;; c indent style
(setq c-default-style "linux"
          c-basic-offset 4)

(setq-default c-basic-offset 4
                  tab-width 4
                  indent-tabs-mode nil)
;; break long method name and argument to multilines
(defun my-indent-setup ()
      (c-set-offset 'arglist-intro '+))
(add-hook 'java-mode-hook 'my-indent-setup)

;; Python Hook, for note, no effect
(add-hook 'python-mode-hook
          (function (lambda ()
                     (setq indent-tabs-mode nil
                            tab-width 4))))

(add-hook 'python-mode-hook '(lambda ()
      (local-set-key (kbd "RET") 'newline-and-indent)))

;lua
(setq lua-indent-level 4)

;; }}}


;; {{{ killing and yanking
(defun yank-pop-forwards (arg)
   (interactive "p")
   (yank-pop (- arg)))

(global-set-key "\M-Y" 'yank-pop-forwards) ; M-Y (Meta-Shift-Y)
;; }}}


;; {{{ Diff
(setq diff-switches "--unified=5 --show-c-function")
(setq vc-git-diff-switches "--unified=5")

(defun command-line-diff (switch)
  (let ((file1 (pop command-line-args-left))
        (file2 (pop command-line-args-left)))
    (ediff file1 file2)))

(add-to-list 'command-switch-alist '("-diff" . command-line-diff))

;; Usage: emacs -diff file1 file2

;(setq ediff-window-setup-function 'ediff-setup-windows-plain)
(setq ediff-split-window-function 'split-window-horizontally)
;(setq ediff-split-window-function (if (> (frame-width) 150)
;                                      'split-window-horizontally
;                                    'split-window-vertically))

; (defun update-diff-colors ()
;   "update the colors for diff faces"
;   (set-face-attribute 'diff-added nil
;                       :foreground "white" :background "blue")
;   (set-face-attribute 'diff-removed nil
;                       :foreground "white" :background "red3")
;   (set-face-attribute 'diff-changed nil
;                       :foreground "white" :background "purple"))
; (eval-after-load "diff-mode"
;   '(update-diff-colors))
;; }}}


;; {{{ Folding
;; (load "folding")
(autoload 'folding-mode          "folding" "Folding mode" t)
(autoload 'turn-off-folding-mode "folding" "Folding mode" t)
(autoload 'turn-on-folding-mode  "folding" "Folding mode" t)

(folding-mode-add-find-file-hook)
(folding-add-to-marks-list 'lua-mode     "-- {{{" "-- }}}" nil t)
(folding-add-to-marks-list 'ruby-mode    "#{{{" "#}}}" nil t)
(folding-add-to-marks-list 'php-mode     "//{"  "//}"  nil t)
(folding-add-to-marks-list 'prolog-mode  "%{{{" "%}}}" nil t)
(folding-add-to-marks-list 'html-mode    "<!-- {{{ " "<!-- }}} -->" " -->" nil t)
;; }}}



;; {{{ Auto File Mode
;(autoload 'markdown-mode "markdown-mode"
;   "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))

(add-to-list 'auto-mode-alist '("emacs-rc\\'" . lisp-mode))
(add-to-list 'auto-mode-alist '("\\.emacs\\'" . lisp-mode))

(add-to-list 'auto-mode-alist '("^/etc/nginx/" . nginx-mode))

(autoload 'lua-mode "lua-mode" "Lua editing mode." t)
(add-to-list 'auto-mode-alist '("\\.lua$" . lua-mode))
(add-to-list 'interpreter-mode-alist '("lua" . lua-mode))

;; }}}

;; {{{ hooks of save
(add-hook 'markdown-mode-hook
          (lambda ()
            (when buffer-file-name
              (add-hook 'after-save-hook
                        'markdown-export
                        nil t))))
;;}}}
