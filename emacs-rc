(put 'scroll-left 'disabled nil)
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(inhibit-startup-screen t)
 '(show-paren-mode t))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:family "DejaVu Sans Mono" :foundry "unknown" :slant normal :weight normal :height 98 :width normal)))))

;; (add-to-list 'default-frame-alist '(t (:family "DejaVu Sans Mono" :foundry "unknown" :slant normal :weight normal :height 98 :width normal) ))

(add-to-list 'load-path "~/.emacs.d/my-pkgs/")

(when (>= emacs-major-version 24)
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/") t)
  (add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/") t)
  (package-initialize)
  )

(setq package-load-list '(nlinum auto-complete jedi markdown-mode))

;(autoload 'markdown-mode "markdown-mode"
;   "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))

(add-to-list 'auto-mode-alist '("emacs-rc\\'" . lisp-mode))
(add-to-list 'auto-mode-alist '("\\.emacs\\'" . lisp-mode))

(add-to-list 'auto-mode-alist '("^/etc/nginx/" . nginx-mode))


(require 'saveplace)                          ;; get the package
(setq save-place-file "~/.emacs.d/var/saveplace") ;; keep my ~/ clean
(setq-default save-place t)                   ;; activate it for all buffers

;; auto-complete
(require 'auto-complete-config)
;; (add-to-list 'ac-dictionary-directories "~/.emacs.d/ac-dict")
(setq ac-comphist-file "~/.emacs.d/var/ac-comphist.dat")
(ac-config-default)

(add-hook 'c-mode-common-hook '(lambda ()

                                 ;; ac-omni-completion-sources is made buffer local so
                                 ;; you need to add it to a mode hook to activate on 
                                 ;; whatever buffer you want to use it with.  This
                                 ;; example uses C mode (as you probably surmised).

                                 ;; auto-complete.el expects ac-omni-completion-sources to be
                                 ;; a list of cons cells where each cell's car is a regex
                                 ;; that describes the syntactical bits you want AutoComplete
                                 ;; to be aware of. The cdr of each cell is the source that will
                                 ;; supply the completion data.  The following tells autocomplete
                                 ;; to begin completion when you type in a . or a ->

                                 (add-to-list 'ac-omni-completion-sources
                                              (cons "\\." '(ac-source-semantic)))
                                 (add-to-list 'ac-omni-completion-sources
                                              (cons "->" '(ac-source-semantic)))

                                 ;; ac-sources was also made buffer local in new versions of
                                 ;; autocomplete.  In my case, I want AutoComplete to use 
                                 ;; semantic and yasnippet (order matters, if reversed snippets
                                 ;; will appear before semantic tag completions).

                                 (setq ac-sources '(ac-source-semantic ac-source-yasnippet))
                                 ))

;; dirty fix for having AC everywhere
(define-globalized-minor-mode real-global-auto-complete-mode
  auto-complete-mode (lambda ()
                       (if (not (minibufferp (current-buffer)))
                         (auto-complete-mode 1))
                       ))
(real-global-auto-complete-mode t)


;; line number
(require 'nlinum)
(global-linum-mode t)
(setq linum-format "%3d ")

(require 'xcscope)

(windmove-default-keybindings)   ;; use Shift+up/down/right/left to jump between windows

(show-paren-mode 1)    ; turn on paren match highlighting
(setq show-paren-style 'expression)   ; highlight entire bracket expression

(recentf-mode 1)

(global-visual-line-mode 1) ; wrap at word boundary. 1 for on, 0 for off.

;; (global-hl-line-mode 1) ; turn on highlighting current line

;; code indent
;(setq-default indent-tabs-mode nil)
;(setq-default tab-width 2)

;; c indent style
(setq c-default-style "linux"
          c-basic-offset 4)

(setq-default c-basic-offset 4
                  tab-width 4
                  indent-tabs-mode nil)
;; break long method name and argument to multilines
(defun my-indent-setup ()
      (c-set-offset 'arglist-intro '+))
(add-hook 'java-mode-hook 'my-indent-setup)

;; Python Hook, for note, no effect
(add-hook 'python-mode-hook
          (function (lambda ()
                     (setq indent-tabs-mode nil
                            tab-width 4))))

(add-hook 'python-mode-hook '(lambda ()
      (local-set-key (kbd "RET") 'newline-and-indent)))

;; killing and yanking
(defun yank-pop-forwards (arg)
   (interactive "p")
   (yank-pop (- arg)))

(global-set-key "\M-Y" 'yank-pop-forwards) ; M-Y (Meta-Shift-Y)

;; Diff
(setq diff-switches "--unified=5 --show-c-function")
(setq vc-git-diff-switches "--unified=5")

(defun command-line-diff (switch)
  (let ((file1 (pop command-line-args-left))
        (file2 (pop command-line-args-left)))
    (ediff file1 file2)))

(add-to-list 'command-switch-alist '("-diff" . command-line-diff))

;; Usage: emacs -diff file1 file2

;(setq ediff-window-setup-function 'ediff-setup-windows-plain)
(setq ediff-split-window-function 'split-window-horizontally)
;(setq ediff-split-window-function (if (> (frame-width) 150)
;                                      'split-window-horizontally
;                                    'split-window-vertically))

; (defun update-diff-colors ()
;   "update the colors for diff faces"
;   (set-face-attribute 'diff-added nil
;                       :foreground "white" :background "blue")
;   (set-face-attribute 'diff-removed nil
;                       :foreground "white" :background "red3")
;   (set-face-attribute 'diff-changed nil
;                       :foreground "white" :background "purple"))
; (eval-after-load "diff-mode"
;   '(update-diff-colors))
